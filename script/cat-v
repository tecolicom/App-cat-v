#!/usr/bin/env perl

use strict;
use warnings;

use  App::cat::v;
exit App::cat::v->new->run(splice @ARGV);

__END__

=encoding utf-8

=head1 NAME

cat-v - visualize non-printing characters

=head1 SYNOPSIS

cat-v [ options ] args ...

  OPTIONS
     -n   --reset         Disable all character conversion
     -c   --visible=#     Specify visualize characters
          --repeat=#      Specify repeat characters
     -t   --expand        Expand tabs
     -T   --no-expand     Do not expand tabs
    --ts  --tabstyle=#    Set tab style
          --tabstop=#     Set tab width
          --tabhead=#     Set tab-head character
          --tabspace=#    Set tab-space character
     -h   --help          Print this message
     -v   --version       Print version

  OPTIONS FOR EACH CHARACTERS
    --nl                  Enable newline
    --nl=0                Disable newline
    --nl='RETURN SYMBOL'  Unicode name

  EXAMPLES
    cat-v --esc           Visualize escape
    cat-v -c all=s,esc=0  Show by simbol everything but ESC
    cat-v --ts=shade      Use "shade" style for to visualize tabs
    cat-v -T              Do not expand tabs
    cat-v --sp=~          Convert spaces to tilde

=head1 VERSION

Version 0.01

=head1 DESCRIPTION

The C<cat -v> command is often used to display characters that cannot
be displayed, but is not always suitable for viewing the output of
modern applications because it converts all non-ASCII graphic
characters.

The C<cat-v> command visualizes whitespace and control characters
while preserving the display of displayable graphic characters.

=begin html

<p><img width="750" src="https://raw.githubusercontent.com/tecolicom/App-cat-v/main/images/tree.png">

=end html

Also, by default, escape characters are not converted, so decorations
by ANSI escape sequences are retained.

=begin html

<p><img width="750" src="https://raw.githubusercontent.com/tecolicom/App-cat-v/main/images/visualized.png">

=end html

Sometimes it is desirable to visualize whitespace characters.  The
C<cat -t> command can visualize tab characters, but the problem is
that it breaks the visual format.  Sometimes we want to see which
parts are tabs and which parts are whitespace characters while
preserving the format.  Extra whitespace characters at the end of a
line can also be noticed by visualizing them.

Using C<cat-v>, tab characters are visualized in such a way that the
space on the display does not change.

=begin html

<p><img width="750" src="https://raw.githubusercontent.com/tecolicom/App-cat-v/main/images/tabstyle-pin.png">

=end html

Control characters can be displayed in control format and Unicode
symbol characters.  By default, control characters other than newline
and escape characters are displayed as corresponding Unicode symbols.

    nul  \000  \x{2400}  ␀  SYMBOL FOR NULL
    soh  \001  \x{2401}  ␁  SYMBOL FOR START OF HEADING
    stx  \002  \x{2402}  ␂  SYMBOL FOR START OF TEXT
    etx  \003  \x{2403}  ␃  SYMBOL FOR END OF TEXT
    eot  \004  \x{2404}  ␄  SYMBOL FOR END OF TRANSMISSION
    enq  \005  \x{2405}  ␅  SYMBOL FOR ENQUIRY
    ack  \006  \x{2406}  ␆  SYMBOL FOR ACKNOWLEDGE
    bel  \007  \x{2407}  ␇  SYMBOL FOR BELL
    bs   \010  \x{2408}  ␈  SYMBOL FOR BACKSPACE
    ht   \011  \x{2409}  ␉  SYMBOL FOR HORIZONTAL TABULATION
    nl   \012  \x{240A}  ␊  SYMBOL FOR LINE FEED
    vt   \013  \x{240B}  ␋  SYMBOL FOR VERTICAL TABULATION
    np   \014  \x{240C}  ␌  SYMBOL FOR FORM FEED
    cr   \015  \x{240D}  ␍  SYMBOL FOR CARRIAGE RETURN
    so   \016  \x{240E}  ␎  SYMBOL FOR SHIFT OUT
    si   \017  \x{240F}  ␏  SYMBOL FOR SHIFT IN
    dle  \020  \x{2410}  ␐  SYMBOL FOR DATA LINK ESCAPE
    dc1  \021  \x{2411}  ␑  SYMBOL FOR DEVICE CONTROL ONE
    dc2  \022  \x{2412}  ␒  SYMBOL FOR DEVICE CONTROL TWO
    dc3  \023  \x{2413}  ␓  SYMBOL FOR DEVICE CONTROL THREE
    dc4  \024  \x{2414}  ␔  SYMBOL FOR DEVICE CONTROL FOUR
    nak  \025  \x{2415}  ␕  SYMBOL FOR NEGATIVE ACKNOWLEDGE
    syn  \026  \x{2416}  ␖  SYMBOL FOR SYNCHRONOUS IDLE
    etb  \027  \x{2417}  ␗  SYMBOL FOR END OF TRANSMISSION BLOCK
    can  \030  \x{2418}  ␘  SYMBOL FOR CANCEL
    em   \031  \x{2419}  ␙  SYMBOL FOR END OF MEDIUM
    sub  \032  \x{241A}  ␚  SYMBOL FOR SUBSTITUTE
    esc  \033  \x{241B}  ␛  SYMBOL FOR ESCAPE
    fs   \034  \x{241C}  ␜  SYMBOL FOR FILE SEPARATOR
    gs   \035  \x{241D}  ␝  SYMBOL FOR GROUP SEPARATOR
    rs   \036  \x{241E}  ␞  SYMBOL FOR RECORD SEPARATOR
    us   \037  \x{241F}  ␟  SYMBOL FOR UNIT SEPARATOR
    sp   \040  \x{2420}  ␠  SYMBOL FOR SPACE
    del  \177  \x{2421}  ␡  SYMBOL FOR DELETE
    nbsp \240  \x{2423}  ␣  OPEN BOX

=head1 OPTIONS

=over 7

=item B<-n>, B<--reset>

Disables all character conversions.

=item B<-c>, B<--visible> I<name>=I<flag>,...

Give the character type and flags as parameters to specify the
character to be visualized and the conversion format.

    c  control style
    s  symbol style
    0  do not convert
    *  non-alphanumeric char is used as a replacement

Option C<-c nl=1> can also be used to visualize newline characters.
For newline characters only, after displaying the result of the
conversion, the original character is output at the same time.

Use the names in the list above to specify by character type.  If you
want to convert escapes without converting tabs, use the following

    cat-v -c tab=0 -c esc=s

Multiple items can be specified at the same time.  The following
example sets C<tab> and C<bel> to 0 and C<esc> to 1.

    cat-v -c tab=bel=0,esc=s

If C<all> is specified for the name, the value applies to all
character types.  You can enable all and then exclude only escapes as
follows

    cat-v -c all=s,esc=0

=item B<-->I<name>[=I<flag>]

All control characters can also be accessed by an option with their
name.  For example, option C<--nl> is defined for the newline
character.

Used alone, it activates the visibility of the character.

    cat-v --nl

To disable, give the value 0.

    cat-v --nl=0

If a letter other than an alphabet or a number is given, it will be
replaced by that letter.

    cat-v --nl='$'

If a string of two or more characters is given, it is interpreted as a
Unicode character name.

    cat-v --nl='RETURN SYMBOL' --sp='MIDDLE DOT'

If flag begins with C<+>, that character is added to the repeat list.
So

    cat -v --esc=+s

will have the same meaning as if you had written:

    cat -v --esc=s --repeat +esc

=item B<--repeat>=I<name>[,I<name>...]

Specifies the character type for outputting the original character at
the same time as the converted character.  The default setting is
C<nl,np>.  The following will correctly output the original ANSI
sequence with the escape character visualized.

    cat-v -c esc --repeat esc,nl

If I<name> begins with C<+>, add that character in addition to the
existing configuration.

    cat-v -c esc --repeat +esc

=item B<-t>, B<--expand>

=item B<-T>, B<--no-expand>

Tab characters are expanded by default.  To explicitly disable it, use
the B<-T> or B<--no-expand> option.

By default, the style C<pin> is applied, which can be changed with
C<--tabstyle>. If the C<--tabstyle> option is specified with no
arguments, a list of available styles is displayed.

You can disable tab expansion by default by putting the following
setting in your C<~/.cat-vrc> file.

    option default --no-expand

In such cases, tab expansion can be temporarily enabled by the C<-t>
option.

=item B<--tabstop>=# (DEFAULT: 8)

Set tab width.

=item B<--tabhead>=#

=item B<--tabspace>=#

Set head and following space characters.
If the option value is longer than single character, it is evaluated
as unicode name.

=item B<--tabstyle>, B<--ts>

=item B<--tabstyle>=I<style>, B<--ts>=...

=item B<--tabstyle>=I<head-style>,I<space-style> B<--ts>=...

Set the style how tab is expanded.  Select C<symbol> or C<shade> for
example.  If two style names are combined, like
C<squat-arrow,middle-dot>, use C<squat-arrow> for tabhead and
C<middle-dot> for tabspace.

Show available style list if called without parameter.  Styles are
defined in L<Text::ANSI::Fold> library.

=back

=head1 INSTALL

=head2 CPANMINUS

From CPAN archive:

    cpanm App::cat::v

From GIT repository:

    cpanm https://github.com/tecolicom/App-cat-v.git

=head1 SEE ALSO

=over 4

=item L<https://github.com/tecolicom/App-cat-v.git>

Git repository.

=item L<App::optex::util::filter>

The predecessor of the C<cat-v> command was originally created as the 
filter module of the L<App::optex> command.

=back

=head1 AUTHOR

Kazumasa Utashiro

=head1 LICENSE

Copyright © 2024 Kazumasa Utashiro.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
